// Cloud Development Kit for Kubernetes
package cdk8s

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/awslabs/cdk8s-go/cdk8s/cdk8s/jsii"
	"reflect"
	"github.com/aws/constructs-go/constructs/v3"
)

// Class interface
type ApiObjectIface interface {
	constructs.IConstructIface
	GetApiGroup() string
	GetApiVersion() string
	GetChart() ChartIface
	GetKind() string
	GetMetadata() ApiObjectMetadataDefinitionIface
	GetName() string
	OnPrepare()
	OnSynthesize(session constructs.ISynthesisSessionIface)
	OnValidate() []string
	ToString() string
	AddDependency(dependencies constructs.IConstructIface)
	AddJsonPatch(ops JsonPatchIface)
	ToJson() interface{}
}

// Experimental.
// Struct proxy
type ApiObject struct {
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	// Experimental.
	ApiGroup string `json:"apiGroup"`
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	// Experimental.
	ApiVersion string `json:"apiVersion"`
	// The chart in which this object is defined.
	// Experimental.
	Chart ChartIface `json:"chart"`
	// The object kind.
	// Experimental.
	Kind string `json:"kind"`
	// Metadata associated with this API object.
	// Experimental.
	Metadata ApiObjectMetadataDefinitionIface `json:"metadata"`
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	// Experimental.
	Name string `json:"name"`
}

func (a *ApiObject) GetApiGroup() string {
	var returns string
	_jsii_.Get(
		a,
		"apiGroup",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObject) GetApiVersion() string {
	var returns string
	_jsii_.Get(
		a,
		"apiVersion",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObject) GetChart() ChartIface {
	var returns ChartIface
	_jsii_.Get(
		a,
		"chart",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ChartIface)(nil)).Elem(): reflect.TypeOf((*Chart)(nil)).Elem(),
		},
	)
	return returns
}

func (a *ApiObject) GetKind() string {
	var returns string
	_jsii_.Get(
		a,
		"kind",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObject) GetMetadata() ApiObjectMetadataDefinitionIface {
	var returns ApiObjectMetadataDefinitionIface
	_jsii_.Get(
		a,
		"metadata",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ApiObjectMetadataDefinitionIface)(nil)).Elem(): reflect.TypeOf((*ApiObjectMetadataDefinition)(nil)).Elem(),
		},
	)
	return returns
}

func (a *ApiObject) GetName() string {
	var returns string
	_jsii_.Get(
		a,
		"name",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Defines an API object.
func NewApiObject(scope constructs.ConstructIface, id string, props ApiObjectPropsIface) ApiObjectIface {
	_init_.Initialize()
	self := ApiObject{}
	_jsii_.Create(
		"cdk8s.ApiObject",
		[]interface{}{scope, id, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func ApiObject_Of(c constructs.IConstructIface) ApiObjectIface {
	_init_.Initialize()
	var returns ApiObjectIface
	_jsii_.InvokeStatic(
		"cdk8s.ApiObject",
		"of",
		[]interface{}{c},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ApiObjectIface)(nil)).Elem(): reflect.TypeOf((*ApiObject)(nil)).Elem(),
		},
	)
	return returns
}

func (a *ApiObject) OnPrepare() {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"onPrepare",
		[]interface{}{},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *ApiObject) OnSynthesize(session constructs.ISynthesisSessionIface) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"onSynthesize",
		[]interface{}{session},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *ApiObject) OnValidate() []string {
	var returns []string
	_jsii_.Invoke(
		a,
		"onValidate",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (a *ApiObject) ToString() string {
	var returns string
	_jsii_.Invoke(
		a,
		"toString",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObject) AddDependency(dependencies constructs.IConstructIface) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"addDependency",
		[]interface{}{dependencies},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *ApiObject) AddJsonPatch(ops JsonPatchIface) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"addJsonPatch",
		[]interface{}{ops},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *ApiObject) ToJson() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"toJson",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// ApiObjectMetadataIface is the public interface for the custom type ApiObjectMetadata
// Experimental.
type ApiObjectMetadataIface interface {
	GetAnnotations() map[string]string
	GetLabels() map[string]string
	GetName() string
	GetNamespace() string
}

// Metadata associated with this object.
// Experimental.
// Struct proxy
type ApiObjectMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.
	//
	// They are not queryable and should be
	// preserved when modifying objects.
	// See: http://kubernetes.io/docs/user-guide/annotations
	//
	// Experimental.
	Annotations map[string]string `json:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects.
	//
	// May match selectors of replication controllers and services.
	// See: http://kubernetes.io/docs/user-guide/labels
	//
	// Experimental.
	Labels map[string]string `json:"labels"`
	// The unique, namespace-global, name of this object inside the Kubernetes cluster.
	//
	// Normally, you shouldn't specify names for objects and let the CDK generate
	// a name for you that is application-unique. The names CDK generates are
	// composed from the construct path components, separated by dots and a suffix
	// that is based on a hash of the entire path, to ensure uniqueness.
	//
	// You can supply custom name allocation logic by overriding the
	// `chart.generateObjectName` method.
	//
	// If you use an explicit name here, bear in mind that this reduces the
	// composability of your construct because it won't be possible to include
	// more than one instance in any app. Therefore it is highly recommended to
	// leave this unspecified.
	// Experimental.
	Name string `json:"name"`
	// Namespace defines the space within each name must be unique.
	//
	// An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
	// Experimental.
	Namespace string `json:"namespace"`
}

func (a *ApiObjectMetadata) GetAnnotations() map[string]string {
	var returns map[string]string
	_jsii_.Get(
		a,
		"annotations",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (a *ApiObjectMetadata) GetLabels() map[string]string {
	var returns map[string]string
	_jsii_.Get(
		a,
		"labels",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (a *ApiObjectMetadata) GetName() string {
	var returns string
	_jsii_.Get(
		a,
		"name",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObjectMetadata) GetNamespace() string {
	var returns string
	_jsii_.Get(
		a,
		"namespace",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Class interface
type ApiObjectMetadataDefinitionIface interface {
	GetName() string
	GetNamespace() string
	Add(key string, value interface{})
	AddAnnotation(key string, value string)
	AddLabel(key string, value string)
	GetLabel(key string) string
	ToJson() interface{}
}

// Object metadata.
// Experimental.
// Struct proxy
type ApiObjectMetadataDefinition struct {
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	// Experimental.
	Name string `json:"name"`
	// The object's namespace.
	// Experimental.
	Namespace string `json:"namespace"`
}

func (a *ApiObjectMetadataDefinition) GetName() string {
	var returns string
	_jsii_.Get(
		a,
		"name",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObjectMetadataDefinition) GetNamespace() string {
	var returns string
	_jsii_.Get(
		a,
		"namespace",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


func NewApiObjectMetadataDefinition(options ApiObjectMetadataIface) ApiObjectMetadataDefinitionIface {
	_init_.Initialize()
	self := ApiObjectMetadataDefinition{}
	_jsii_.Create(
		"cdk8s.ApiObjectMetadataDefinition",
		[]interface{}{options},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *ApiObjectMetadataDefinition) Add(key string, value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"add",
		[]interface{}{key, value},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *ApiObjectMetadataDefinition) AddAnnotation(key string, value string) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"addAnnotation",
		[]interface{}{key, value},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *ApiObjectMetadataDefinition) AddLabel(key string, value string) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"addLabel",
		[]interface{}{key, value},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *ApiObjectMetadataDefinition) GetLabel(key string) string {
	var returns string
	_jsii_.Invoke(
		a,
		"getLabel",
		[]interface{}{key},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObjectMetadataDefinition) ToJson() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"toJson",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// ApiObjectPropsIface is the public interface for the custom type ApiObjectProps
// Experimental.
type ApiObjectPropsIface interface {
	GetApiVersion() string
	GetKind() string
	GetMetadata() ApiObjectMetadataIface
}

// Options for defining API objects.
// Experimental.
// Struct proxy
type ApiObjectProps struct {
	// API version.
	// Experimental.
	ApiVersion string `json:"apiVersion"`
	// Resource kind.
	// Experimental.
	Kind string `json:"kind"`
	// Object metadata.
	//
	// If `name` is not specified, an app-unique name will be allocated by the
	// framework based on the path of the construct within thes construct tree.
	// Experimental.
	Metadata ApiObjectMetadataIface `json:"metadata"`
}

func (a *ApiObjectProps) GetApiVersion() string {
	var returns string
	_jsii_.Get(
		a,
		"apiVersion",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObjectProps) GetKind() string {
	var returns string
	_jsii_.Get(
		a,
		"kind",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *ApiObjectProps) GetMetadata() ApiObjectMetadataIface {
	var returns ApiObjectMetadataIface
	_jsii_.Get(
		a,
		"metadata",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ApiObjectMetadataIface)(nil)).Elem(): reflect.TypeOf((*ApiObjectMetadata)(nil)).Elem(),
		},
	)
	return returns
}


// Class interface
type AppIface interface {
	constructs.IConstructIface
	GetOutdir() string
	OnPrepare()
	OnSynthesize(session constructs.ISynthesisSessionIface)
	OnValidate() []string
	ToString() string
	Synth()
}

// Represents a cdk8s application.
// Experimental.
// Struct proxy
type App struct {
	// The output directory into which manifests will be synthesized.
	// Experimental.
	Outdir string `json:"outdir"`
}

func (a *App) GetOutdir() string {
	var returns string
	_jsii_.Get(
		a,
		"outdir",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Defines an app.
func NewApp(props AppPropsIface) AppIface {
	_init_.Initialize()
	self := App{}
	_jsii_.Create(
		"cdk8s.App",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *App) OnPrepare() {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"onPrepare",
		[]interface{}{},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *App) OnSynthesize(session constructs.ISynthesisSessionIface) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"onSynthesize",
		[]interface{}{session},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (a *App) OnValidate() []string {
	var returns []string
	_jsii_.Invoke(
		a,
		"onValidate",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (a *App) ToString() string {
	var returns string
	_jsii_.Invoke(
		a,
		"toString",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (a *App) Synth() {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"synth",
		[]interface{}{},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

// AppPropsIface is the public interface for the custom type AppProps
// Experimental.
type AppPropsIface interface {
	GetOutdir() string
}

// Experimental.
// Struct proxy
type AppProps struct {
	// The directory to output Kubernetes manifests.
	// Experimental.
	Outdir string `json:"outdir"`
}

func (a *AppProps) GetOutdir() string {
	var returns string
	_jsii_.Get(
		a,
		"outdir",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Class interface
type ChartIface interface {
	constructs.IConstructIface
	GetLabels() map[string]string
	GetNamespace() string
	OnPrepare()
	OnSynthesize(session constructs.ISynthesisSessionIface)
	OnValidate() []string
	ToString() string
	AddDependency(dependencies constructs.IConstructIface)
	GenerateObjectName(apiObject ApiObjectIface) string
	ToJson() []interface{}
}

// Experimental.
// Struct proxy
type Chart struct {
	// Labels applied to all resources in this chart.
	//
	// This is an immutable copy.
	// Experimental.
	Labels map[string]string `json:"labels"`
	// The default namespace for all objects in this chart.
	// Experimental.
	Namespace string `json:"namespace"`
}

func (c *Chart) GetLabels() map[string]string {
	var returns map[string]string
	_jsii_.Get(
		c,
		"labels",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (c *Chart) GetNamespace() string {
	var returns string
	_jsii_.Get(
		c,
		"namespace",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


func NewChart(scope constructs.ConstructIface, id string, props ChartPropsIface) ChartIface {
	_init_.Initialize()
	self := Chart{}
	_jsii_.Create(
		"cdk8s.Chart",
		[]interface{}{scope, id, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Chart_Of(c constructs.IConstructIface) ChartIface {
	_init_.Initialize()
	var returns ChartIface
	_jsii_.InvokeStatic(
		"cdk8s.Chart",
		"of",
		[]interface{}{c},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ChartIface)(nil)).Elem(): reflect.TypeOf((*Chart)(nil)).Elem(),
		},
	)
	return returns
}

func (c *Chart) OnPrepare() {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"onPrepare",
		[]interface{}{},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (c *Chart) OnSynthesize(session constructs.ISynthesisSessionIface) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"onSynthesize",
		[]interface{}{session},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (c *Chart) OnValidate() []string {
	var returns []string
	_jsii_.Invoke(
		c,
		"onValidate",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (c *Chart) ToString() string {
	var returns string
	_jsii_.Invoke(
		c,
		"toString",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (c *Chart) AddDependency(dependencies constructs.IConstructIface) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"addDependency",
		[]interface{}{dependencies},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (c *Chart) GenerateObjectName(apiObject ApiObjectIface) string {
	var returns string
	_jsii_.Invoke(
		c,
		"generateObjectName",
		[]interface{}{apiObject},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (c *Chart) ToJson() []interface{} {
	var returns []interface{}
	_jsii_.Invoke(
		c,
		"toJson",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*interface{})(nil)).Elem(): reflect.TypeOf((*interface{})(nil)).Elem(),
		},
	)
	return returns
}

// ChartPropsIface is the public interface for the custom type ChartProps
// Experimental.
type ChartPropsIface interface {
	GetLabels() map[string]string
	GetNamespace() string
}

// Experimental.
// Struct proxy
type ChartProps struct {
	// Labels to apply to all resources in this chart.
	// Experimental.
	Labels map[string]string `json:"labels"`
	// The default namespace for all objects defined in this chart (directly or indirectly).
	//
	// This namespace will only apply to objects that don't have a
	// `namespace` explicitly defined for them.
	// Experimental.
	Namespace string `json:"namespace"`
}

func (c *ChartProps) GetLabels() map[string]string {
	var returns map[string]string
	_jsii_.Get(
		c,
		"labels",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (c *ChartProps) GetNamespace() string {
	var returns string
	_jsii_.Get(
		c,
		"namespace",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Class interface
type DependencyGraphIface interface {
	GetRoot() DependencyVertexIface
	Topology() []constructs.IConstructIface
}

// Represents the dependency graph for a given Node.
//
// This graph includes the dependency relationships between all nodes in the
// node (construct) sub-tree who's root is this Node.
//
// Note that this means that lonely nodes (no dependencies and no dependants) are also included in this graph as
// childless children of the root node of the graph.
//
// The graph does not include cross-scope dependencies. That is, if a child on the current scope depends on a node
// from a different scope, that relationship is not represented in this graph.
// Experimental.
// Struct proxy
type DependencyGraph struct {
	// Returns the root of the graph.
	//
	// Note that this vertex will always have `null` as its `.value` since it is an artifical root
	// that binds all the connected spaces of the graph.
	// Experimental.
	Root DependencyVertexIface `json:"root"`
}

func (d *DependencyGraph) GetRoot() DependencyVertexIface {
	var returns DependencyVertexIface
	_jsii_.Get(
		d,
		"root",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DependencyVertexIface)(nil)).Elem(): reflect.TypeOf((*DependencyVertex)(nil)).Elem(),
		},
	)
	return returns
}


func NewDependencyGraph(node constructs.NodeIface) DependencyGraphIface {
	_init_.Initialize()
	self := DependencyGraph{}
	_jsii_.Create(
		"cdk8s.DependencyGraph",
		[]interface{}{node},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DependencyGraph) Topology() []constructs.IConstructIface {
	var returns []constructs.IConstructIface
	_jsii_.Invoke(
		d,
		"topology",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*constructs.IConstructIface)(nil)).Elem(): reflect.TypeOf((*constructs.IConstruct)(nil)).Elem(),
		},
	)
	return returns
}

// Class interface
type DependencyVertexIface interface {
	GetInbound() []DependencyVertexIface
	GetOutbound() []DependencyVertexIface
	GetValue() constructs.IConstructIface
	AddChild(dep DependencyVertexIface)
	Topology() []constructs.IConstructIface
}

// Represents a vertex in the graph.
//
// The value of each vertex is an `IConstruct` that is accessible via the `.value` getter.
// Experimental.
// Struct proxy
type DependencyVertex struct {
	// Returns the parents of the vertex (i.e dependants).
	// Experimental.
	Inbound []DependencyVertexIface `json:"inbound"`
	// Returns the children of the vertex (i.e dependencies).
	// Experimental.
	Outbound []DependencyVertexIface `json:"outbound"`
	// Returns the IConstruct this graph vertex represents.
	//
	// `null` in case this is the root of the graph.
	// Experimental.
	Value constructs.IConstructIface `json:"value"`
}

func (d *DependencyVertex) GetInbound() []DependencyVertexIface {
	var returns []DependencyVertexIface
	_jsii_.Get(
		d,
		"inbound",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DependencyVertexIface)(nil)).Elem(): reflect.TypeOf((*DependencyVertex)(nil)).Elem(),
		},
	)
	return returns
}

func (d *DependencyVertex) GetOutbound() []DependencyVertexIface {
	var returns []DependencyVertexIface
	_jsii_.Get(
		d,
		"outbound",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DependencyVertexIface)(nil)).Elem(): reflect.TypeOf((*DependencyVertex)(nil)).Elem(),
		},
	)
	return returns
}

func (d *DependencyVertex) GetValue() constructs.IConstructIface {
	var returns constructs.IConstructIface
	_jsii_.Get(
		d,
		"value",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*constructs.IConstructIface)(nil)).Elem(): reflect.TypeOf((*constructs.IConstruct)(nil)).Elem(),
		},
	)
	return returns
}


func NewDependencyVertex(value constructs.IConstructIface) DependencyVertexIface {
	_init_.Initialize()
	self := DependencyVertex{}
	_jsii_.Create(
		"cdk8s.DependencyVertex",
		[]interface{}{value},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DependencyVertex) AddChild(dep DependencyVertexIface) {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"addChild",
		[]interface{}{dep},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (d *DependencyVertex) Topology() []constructs.IConstructIface {
	var returns []constructs.IConstructIface
	_jsii_.Invoke(
		d,
		"topology",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*constructs.IConstructIface)(nil)).Elem(): reflect.TypeOf((*constructs.IConstruct)(nil)).Elem(),
		},
	)
	return returns
}

// Class interface
type DurationIface interface {
	ToDays(opts TimeConversionOptionsIface) float64
	ToHours(opts TimeConversionOptionsIface) float64
	ToHumanString() string
	ToIsoString() string
	ToMilliseconds(opts TimeConversionOptionsIface) float64
	ToMinutes(opts TimeConversionOptionsIface) float64
	ToSeconds(opts TimeConversionOptionsIface) float64
}

// Represents a length of time.
//
// The amount can be specified either as a literal value (e.g: `10`) which
// cannot be negative.
// Experimental.
// Struct proxy
type Duration struct {
}

func Duration_Days(amount float64) DurationIface {
	_init_.Initialize()
	var returns DurationIface
	_jsii_.InvokeStatic(
		"cdk8s.Duration",
		"days",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DurationIface)(nil)).Elem(): reflect.TypeOf((*Duration)(nil)).Elem(),
		},
	)
	return returns
}

func Duration_Hours(amount float64) DurationIface {
	_init_.Initialize()
	var returns DurationIface
	_jsii_.InvokeStatic(
		"cdk8s.Duration",
		"hours",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DurationIface)(nil)).Elem(): reflect.TypeOf((*Duration)(nil)).Elem(),
		},
	)
	return returns
}

func Duration_Millis(amount float64) DurationIface {
	_init_.Initialize()
	var returns DurationIface
	_jsii_.InvokeStatic(
		"cdk8s.Duration",
		"millis",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DurationIface)(nil)).Elem(): reflect.TypeOf((*Duration)(nil)).Elem(),
		},
	)
	return returns
}

func Duration_Minutes(amount float64) DurationIface {
	_init_.Initialize()
	var returns DurationIface
	_jsii_.InvokeStatic(
		"cdk8s.Duration",
		"minutes",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DurationIface)(nil)).Elem(): reflect.TypeOf((*Duration)(nil)).Elem(),
		},
	)
	return returns
}

func Duration_Parse(duration string) DurationIface {
	_init_.Initialize()
	var returns DurationIface
	_jsii_.InvokeStatic(
		"cdk8s.Duration",
		"parse",
		[]interface{}{duration},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DurationIface)(nil)).Elem(): reflect.TypeOf((*Duration)(nil)).Elem(),
		},
	)
	return returns
}

func Duration_Seconds(amount float64) DurationIface {
	_init_.Initialize()
	var returns DurationIface
	_jsii_.InvokeStatic(
		"cdk8s.Duration",
		"seconds",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*DurationIface)(nil)).Elem(): reflect.TypeOf((*Duration)(nil)).Elem(),
		},
	)
	return returns
}

func (d *Duration) ToDays(opts TimeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		d,
		"toDays",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (d *Duration) ToHours(opts TimeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		d,
		"toHours",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (d *Duration) ToHumanString() string {
	var returns string
	_jsii_.Invoke(
		d,
		"toHumanString",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (d *Duration) ToIsoString() string {
	var returns string
	_jsii_.Invoke(
		d,
		"toIsoString",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (d *Duration) ToMilliseconds(opts TimeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		d,
		"toMilliseconds",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (d *Duration) ToMinutes(opts TimeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		d,
		"toMinutes",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (d *Duration) ToSeconds(opts TimeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		d,
		"toSeconds",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// GroupVersionKindIface is the public interface for the custom type GroupVersionKind
// Experimental.
type GroupVersionKindIface interface {
	GetApiVersion() string
	GetKind() string
}

// Experimental.
// Struct proxy
type GroupVersionKind struct {
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	// Experimental.
	ApiVersion string `json:"apiVersion"`
	// The object kind.
	// Experimental.
	Kind string `json:"kind"`
}

func (g *GroupVersionKind) GetApiVersion() string {
	var returns string
	_jsii_.Get(
		g,
		"apiVersion",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (g *GroupVersionKind) GetKind() string {
	var returns string
	_jsii_.Get(
		g,
		"kind",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Class interface
type HelmIface interface {
	constructs.IConstructIface
	GetApiObjects() []ApiObjectIface
	GetReleaseName() string
	OnPrepare()
	OnSynthesize(session constructs.ISynthesisSessionIface)
	OnValidate() []string
	ToString() string
}

// Represents a Helm deployment.
//
// Use this construct to import an existing Helm chart and incorporate it into your constructs.
// Experimental.
// Struct proxy
type Helm struct {
	// Returns all the included API objects.
	// Experimental.
	ApiObjects []ApiObjectIface `json:"apiObjects"`
	// The helm release name.
	// Experimental.
	ReleaseName string `json:"releaseName"`
}

func (h *Helm) GetApiObjects() []ApiObjectIface {
	var returns []ApiObjectIface
	_jsii_.Get(
		h,
		"apiObjects",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ApiObjectIface)(nil)).Elem(): reflect.TypeOf((*ApiObject)(nil)).Elem(),
		},
	)
	return returns
}

func (h *Helm) GetReleaseName() string {
	var returns string
	_jsii_.Get(
		h,
		"releaseName",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


func NewHelm(scope constructs.ConstructIface, id string, props HelmPropsIface) HelmIface {
	_init_.Initialize()
	self := Helm{}
	_jsii_.Create(
		"cdk8s.Helm",
		[]interface{}{scope, id, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (h *Helm) OnPrepare() {
	var returns interface{}
	_jsii_.Invoke(
		h,
		"onPrepare",
		[]interface{}{},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (h *Helm) OnSynthesize(session constructs.ISynthesisSessionIface) {
	var returns interface{}
	_jsii_.Invoke(
		h,
		"onSynthesize",
		[]interface{}{session},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (h *Helm) OnValidate() []string {
	var returns []string
	_jsii_.Invoke(
		h,
		"onValidate",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (h *Helm) ToString() string {
	var returns string
	_jsii_.Invoke(
		h,
		"toString",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// HelmPropsIface is the public interface for the custom type HelmProps
// Experimental.
type HelmPropsIface interface {
	GetChart() string
	GetHelmExecutable() string
	GetHelmFlags() []string
	GetReleaseName() string
	GetValues() map[string]interface{}
}

// Options for `Helm`.
// Experimental.
// Struct proxy
type HelmProps struct {
	// The chart name to use. It can be a chart from a helm repository or a local directory.
	//
	// This name is passed to `helm template` and has all the relevant semantics.
	//
	// TODO: EXAMPLE
	//
	// Experimental.
	Chart string `json:"chart"`
	// The local helm executable to use in order to create the manifest the chart.
	// Experimental.
	HelmExecutable string `json:"helmExecutable"`
	// Additional flags to add to the `helm` execution.
	// Experimental.
	HelmFlags []string `json:"helmFlags"`
	// The release name.
	// See: https://helm.sh/docs/intro/using_helm/#three-big-concepts
	//
	// Experimental.
	ReleaseName string `json:"releaseName"`
	// Values to pass to the chart.
	// Experimental.
	Values map[string]interface{} `json:"values"`
}

func (h *HelmProps) GetChart() string {
	var returns string
	_jsii_.Get(
		h,
		"chart",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (h *HelmProps) GetHelmExecutable() string {
	var returns string
	_jsii_.Get(
		h,
		"helmExecutable",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (h *HelmProps) GetHelmFlags() []string {
	var returns []string
	_jsii_.Get(
		h,
		"helmFlags",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (h *HelmProps) GetReleaseName() string {
	var returns string
	_jsii_.Get(
		h,
		"releaseName",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (h *HelmProps) GetValues() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		h,
		"values",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*interface{})(nil)).Elem(): reflect.TypeOf((*interface{})(nil)).Elem(),
		},
	)
	return returns
}


// Experimental.
type IAnyProducerIface interface {
	// Experimental.
	Produce() interface{}
}

type IAnyProducer struct {}

func (i *IAnyProducer) Produce() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"produce",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// Class interface
type IncludeIface interface {
	constructs.IConstructIface
	GetApiObjects() []ApiObjectIface
	OnPrepare()
	OnSynthesize(session constructs.ISynthesisSessionIface)
	OnValidate() []string
	ToString() string
}

// Reads a YAML manifest from a file or a URL and defines all resources as API objects within the defined scope.
//
// The names (`metadata.name`) of imported resources will be preserved as-is
// from the manifest.
// Experimental.
// Struct proxy
type Include struct {
	// Returns all the included API objects.
	// Experimental.
	ApiObjects []ApiObjectIface `json:"apiObjects"`
}

func (i *Include) GetApiObjects() []ApiObjectIface {
	var returns []ApiObjectIface
	_jsii_.Get(
		i,
		"apiObjects",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ApiObjectIface)(nil)).Elem(): reflect.TypeOf((*ApiObject)(nil)).Elem(),
		},
	)
	return returns
}


func NewInclude(scope constructs.ConstructIface, id string, props IncludePropsIface) IncludeIface {
	_init_.Initialize()
	self := Include{}
	_jsii_.Create(
		"cdk8s.Include",
		[]interface{}{scope, id, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *Include) OnPrepare() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"onPrepare",
		[]interface{}{},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (i *Include) OnSynthesize(session constructs.ISynthesisSessionIface) {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"onSynthesize",
		[]interface{}{session},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func (i *Include) OnValidate() []string {
	var returns []string
	_jsii_.Invoke(
		i,
		"onValidate",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (i *Include) ToString() string {
	var returns string
	_jsii_.Invoke(
		i,
		"toString",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// IncludePropsIface is the public interface for the custom type IncludeProps
// Experimental.
type IncludePropsIface interface {
	GetUrl() string
}

// Experimental.
// Struct proxy
type IncludeProps struct {
	// Local file path or URL which includes a Kubernetes YAML manifest.
	//
	// TODO: EXAMPLE
	//
	// Experimental.
	Url string `json:"url"`
}

func (i *IncludeProps) GetUrl() string {
	var returns string
	_jsii_.Get(
		i,
		"url",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Class interface
type JsonPatchIface interface {
}

// Utility for applying RFC-6902 JSON-Patch to a document.
//
// Use the the `JsonPatch.apply(doc, ...ops)` function to apply a set of
// operations to a JSON document and return the result.
//
// Operations can be created using the factory methods `JsonPatch.add()`,
// `JsonPatch.remove()`, etc.
//
// TODO: EXAMPLE
//
// Experimental.
// Struct proxy
type JsonPatch struct {
}

func JsonPatch_Add(path string, value interface{}) JsonPatchIface {
	_init_.Initialize()
	var returns JsonPatchIface
	_jsii_.InvokeStatic(
		"cdk8s.JsonPatch",
		"add",
		[]interface{}{path, value},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*JsonPatchIface)(nil)).Elem(): reflect.TypeOf((*JsonPatch)(nil)).Elem(),
		},
	)
	return returns
}

func JsonPatch_Apply(document interface{}, ops JsonPatchIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"cdk8s.JsonPatch",
		"apply",
		[]interface{}{document, ops},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func JsonPatch_Copy(from string, path string) JsonPatchIface {
	_init_.Initialize()
	var returns JsonPatchIface
	_jsii_.InvokeStatic(
		"cdk8s.JsonPatch",
		"copy",
		[]interface{}{from, path},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*JsonPatchIface)(nil)).Elem(): reflect.TypeOf((*JsonPatch)(nil)).Elem(),
		},
	)
	return returns
}

func JsonPatch_Move(from string, path string) JsonPatchIface {
	_init_.Initialize()
	var returns JsonPatchIface
	_jsii_.InvokeStatic(
		"cdk8s.JsonPatch",
		"move",
		[]interface{}{from, path},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*JsonPatchIface)(nil)).Elem(): reflect.TypeOf((*JsonPatch)(nil)).Elem(),
		},
	)
	return returns
}

func JsonPatch_Remove(path string) JsonPatchIface {
	_init_.Initialize()
	var returns JsonPatchIface
	_jsii_.InvokeStatic(
		"cdk8s.JsonPatch",
		"remove",
		[]interface{}{path},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*JsonPatchIface)(nil)).Elem(): reflect.TypeOf((*JsonPatch)(nil)).Elem(),
		},
	)
	return returns
}

func JsonPatch_Replace(path string, value interface{}) JsonPatchIface {
	_init_.Initialize()
	var returns JsonPatchIface
	_jsii_.InvokeStatic(
		"cdk8s.JsonPatch",
		"replace",
		[]interface{}{path, value},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*JsonPatchIface)(nil)).Elem(): reflect.TypeOf((*JsonPatch)(nil)).Elem(),
		},
	)
	return returns
}

func JsonPatch_Test(path string, value interface{}) JsonPatchIface {
	_init_.Initialize()
	var returns JsonPatchIface
	_jsii_.InvokeStatic(
		"cdk8s.JsonPatch",
		"test",
		[]interface{}{path, value},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*JsonPatchIface)(nil)).Elem(): reflect.TypeOf((*JsonPatch)(nil)).Elem(),
		},
	)
	return returns
}

// Class interface
type LazyIface interface {
	Produce() interface{}
}

// Experimental.
// Struct proxy
type Lazy struct {
}

func Lazy_Any(producer IAnyProducerIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"cdk8s.Lazy",
		"any",
		[]interface{}{producer},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (l *Lazy) Produce() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		l,
		"produce",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// NameOptionsIface is the public interface for the custom type NameOptions
// Experimental.
type NameOptionsIface interface {
	GetDelimiter() string
	GetExtra() []string
	GetIncludeHash() bool
	GetMaxLen() float64
}

// Options for name generation.
// Experimental.
// Struct proxy
type NameOptions struct {
	// Delimiter to use between components.
	// Experimental.
	Delimiter string `json:"delimiter"`
	// Extra components to include in the name.
	// Experimental.
	Extra []string `json:"extra"`
	// Include a short hash as last part of the name.
	// Experimental.
	IncludeHash bool `json:"includeHash"`
	// Maximum allowed length for the name.
	// Experimental.
	MaxLen float64 `json:"maxLen"`
}

func (n *NameOptions) GetDelimiter() string {
	var returns string
	_jsii_.Get(
		n,
		"delimiter",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (n *NameOptions) GetExtra() []string {
	var returns []string
	_jsii_.Get(
		n,
		"extra",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*string)(nil)).Elem(): reflect.TypeOf((*string)(nil)).Elem(),
		},
	)
	return returns
}

func (n *NameOptions) GetIncludeHash() bool {
	var returns bool
	_jsii_.Get(
		n,
		"includeHash",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (n *NameOptions) GetMaxLen() float64 {
	var returns float64
	_jsii_.Get(
		n,
		"maxLen",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Class interface
type NamesIface interface {
}

// Utilities for generating unique and stable names.
// Experimental.
// Struct proxy
type Names struct {
}

func Names_ToDnsLabel(scope constructs.ConstructIface, options NameOptionsIface) string {
	_init_.Initialize()
	var returns string
	_jsii_.InvokeStatic(
		"cdk8s.Names",
		"toDnsLabel",
		[]interface{}{scope, options},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func Names_ToLabelValue(scope constructs.ConstructIface, options NameOptionsIface) string {
	_init_.Initialize()
	var returns string
	_jsii_.InvokeStatic(
		"cdk8s.Names",
		"toLabelValue",
		[]interface{}{scope, options},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// Class interface
type SizeIface interface {
	ToGibibytes(opts SizeConversionOptionsIface) float64
	ToKibibytes(opts SizeConversionOptionsIface) float64
	ToMebibytes(opts SizeConversionOptionsIface) float64
	ToPebibytes(opts SizeConversionOptionsIface) float64
	ToTebibytes(opts SizeConversionOptionsIface) float64
}

// Represents the amount of digital storage.
//
// The amount can be specified either as a literal value (e.g: `10`) which
// cannot be negative.
//
// When the amount is passed as a token, unit conversion is not possible.
// Experimental.
// Struct proxy
type Size struct {
}

func Size_Gibibytes(amount float64) SizeIface {
	_init_.Initialize()
	var returns SizeIface
	_jsii_.InvokeStatic(
		"cdk8s.Size",
		"gibibytes",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*SizeIface)(nil)).Elem(): reflect.TypeOf((*Size)(nil)).Elem(),
		},
	)
	return returns
}

func Size_Kibibytes(amount float64) SizeIface {
	_init_.Initialize()
	var returns SizeIface
	_jsii_.InvokeStatic(
		"cdk8s.Size",
		"kibibytes",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*SizeIface)(nil)).Elem(): reflect.TypeOf((*Size)(nil)).Elem(),
		},
	)
	return returns
}

func Size_Mebibytes(amount float64) SizeIface {
	_init_.Initialize()
	var returns SizeIface
	_jsii_.InvokeStatic(
		"cdk8s.Size",
		"mebibytes",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*SizeIface)(nil)).Elem(): reflect.TypeOf((*Size)(nil)).Elem(),
		},
	)
	return returns
}

func Size_Pebibyte(amount float64) SizeIface {
	_init_.Initialize()
	var returns SizeIface
	_jsii_.InvokeStatic(
		"cdk8s.Size",
		"pebibyte",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*SizeIface)(nil)).Elem(): reflect.TypeOf((*Size)(nil)).Elem(),
		},
	)
	return returns
}

func Size_Tebibytes(amount float64) SizeIface {
	_init_.Initialize()
	var returns SizeIface
	_jsii_.InvokeStatic(
		"cdk8s.Size",
		"tebibytes",
		[]interface{}{amount},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*SizeIface)(nil)).Elem(): reflect.TypeOf((*Size)(nil)).Elem(),
		},
	)
	return returns
}

func (s *Size) ToGibibytes(opts SizeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"toGibibytes",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (s *Size) ToKibibytes(opts SizeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"toKibibytes",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (s *Size) ToMebibytes(opts SizeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"toMebibytes",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (s *Size) ToPebibytes(opts SizeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"toPebibytes",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

func (s *Size) ToTebibytes(opts SizeConversionOptionsIface) float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"toTebibytes",
		[]interface{}{opts},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

// SizeConversionOptionsIface is the public interface for the custom type SizeConversionOptions
// Experimental.
type SizeConversionOptionsIface interface {
	GetRounding() SizeRoundingBehavior
}

// Options for how to convert time to a different unit.
// Experimental.
// Struct proxy
type SizeConversionOptions struct {
	// How conversions should behave when it encounters a non-integer result.
	// Experimental.
	Rounding SizeRoundingBehavior `json:"rounding"`
}

func (s *SizeConversionOptions) GetRounding() SizeRoundingBehavior {
	var returns SizeRoundingBehavior
	_jsii_.Get(
		s,
		"rounding",
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*SizeRoundingBehavior)(nil)).Elem(): reflect.TypeOf((*SizeRoundingBehavior)(nil)).Elem(),
		},
	)
	return returns
}


// Rounding behaviour when converting between units of `Size`.
// Experimental.
type SizeRoundingBehavior string

const (
	SizeRoundingBehaviorFail SizeRoundingBehavior = "FAIL"
	SizeRoundingBehaviorFloor SizeRoundingBehavior = "FLOOR"
	SizeRoundingBehaviorNone SizeRoundingBehavior = "NONE"
)

// Class interface
type TestingIface interface {
}

// Testing utilities for cdk8s applications.
// Experimental.
// Struct proxy
type Testing struct {
}

func Testing_App() AppIface {
	_init_.Initialize()
	var returns AppIface
	_jsii_.InvokeStatic(
		"cdk8s.Testing",
		"app",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*AppIface)(nil)).Elem(): reflect.TypeOf((*App)(nil)).Elem(),
		},
	)
	return returns
}

func Testing_Chart() ChartIface {
	_init_.Initialize()
	var returns ChartIface
	_jsii_.InvokeStatic(
		"cdk8s.Testing",
		"chart",
		[]interface{}{},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*ChartIface)(nil)).Elem(): reflect.TypeOf((*Chart)(nil)).Elem(),
		},
	)
	return returns
}

func Testing_Synth(chart ChartIface) []interface{} {
	_init_.Initialize()
	var returns []interface{}
	_jsii_.InvokeStatic(
		"cdk8s.Testing",
		"synth",
		[]interface{}{chart},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*interface{})(nil)).Elem(): reflect.TypeOf((*interface{})(nil)).Elem(),
		},
	)
	return returns
}

// TimeConversionOptionsIface is the public interface for the custom type TimeConversionOptions
// Experimental.
type TimeConversionOptionsIface interface {
	GetIntegral() bool
}

// Options for how to convert time to a different unit.
// Experimental.
// Struct proxy
type TimeConversionOptions struct {
	// If `true`, conversions into a larger time unit (e.g. `Seconds` to `Minutes`) will fail if the result is not an integer.
	// Experimental.
	Integral bool `json:"integral"`
}

func (t *TimeConversionOptions) GetIntegral() bool {
	var returns bool
	_jsii_.Get(
		t,
		"integral",
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}


// Class interface
type YamlIface interface {
}

// YAML utilities.
// Experimental.
// Struct proxy
type Yaml struct {
}

func Yaml_Load(urlOrFile string) []interface{} {
	_init_.Initialize()
	var returns []interface{}
	_jsii_.InvokeStatic(
		"cdk8s.Yaml",
		"load",
		[]interface{}{urlOrFile},
		true,
		&returns,
		map[reflect.Type]reflect.Type{
			reflect.TypeOf((*interface{})(nil)).Elem(): reflect.TypeOf((*interface{})(nil)).Elem(),
		},
	)
	return returns
}

func Yaml_Save(filePath string, docs []interface{}) {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"cdk8s.Yaml",
		"save",
		[]interface{}{filePath, docs},
		false,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
}

func Yaml_Tmp(docs []interface{}) string {
	_init_.Initialize()
	var returns string
	_jsii_.InvokeStatic(
		"cdk8s.Yaml",
		"tmp",
		[]interface{}{docs},
		true,
		&returns,
		map[reflect.Type]reflect.Type{},
	)
	return returns
}

